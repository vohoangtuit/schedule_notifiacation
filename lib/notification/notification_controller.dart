import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;

class NotificationController {
  late final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin;
  final GlobalKey<NavigatorState> navigatorKey;

  NotificationController({required this.navigatorKey}) {
    _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
  }

  Future<void> initialize() async {
    // ‚úÖ 1. Kh·ªüi t·∫°o timezone
    tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('Asia/Ho_Chi_Minh'));

    // ‚úÖ 2. Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
    await _flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin>()
        ?.requestNotificationsPermission();

    await _flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
        IOSFlutterLocalNotificationsPlugin>()
        ?.requestPermissions(alert: true, badge: true, sound: true);

    // ‚úÖ 3. C·∫•u h√¨nh kh·ªüi t·∫°o
    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    final darwinInit = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      // onDidReceiveLocalNotification: (id, title, body, payload) async {
      //   // B·∫Øt s·ª± ki·ªán khi th√¥ng b√°o ƒë∆∞·ª£c hi·ªÉn th·ªã foreground tr√™n iOS
      //   debugPrint('üì© iOS Foreground Notification: $title');
      // },
    );

    var settings = InitializationSettings(
      android: androidInit,
      iOS: darwinInit,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      settings,
      onDidReceiveNotificationResponse: _onDidReceiveNotificationResponse,
    );

    // ‚úÖ 4. Log quy·ªÅn
    final granted = await _flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin>()
        ?.areNotificationsEnabled();
    debugPrint("üîî Quy·ªÅn th√¥ng b√°o (areNotificationsEnabled): $granted");
  }

  Future<void> _onDidReceiveNotificationResponse(
      NotificationResponse response) async {
    debugPrint('üîî Notification clicked: ${response.payload}');
    // N·∫øu mu·ªën ƒëi·ªÅu h∆∞·ªõng:
    // navigatorKey.currentState?.pushNamed('/target');
  }

  // ‚úÖ Hi·ªán th√¥ng b√°o ngay (cho test nhanh)
  Future<void> showNow({String? title, String? body}) async {
    const androidDetails = AndroidNotificationDetails(
      'instant_channel',
      'Instant Notifications',
      channelDescription: 'Th√¥ng b√°o hi·ªÉn th·ªã ngay',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
    );

    const details =
    NotificationDetails(android: androidDetails, iOS: DarwinNotificationDetails());

    await _flutterLocalNotificationsPlugin.show(
      999,
      title ?? 'Th√¥ng b√°o test',
      body ?? 'ƒê√¢y l√† th√¥ng b√°o hi·ªán ngay',
      details,
    );
  }

  // ‚úÖ Schedule sau X gi√¢y
  Future<void> scheduleInSeconds(int seconds) async {
    final scheduledDate =
    tz.TZDateTime.now(tz.local).add(Duration(seconds: seconds));

    const androidDetails = AndroidNotificationDetails(
      'test_channel_id',
      'Test Channel',
      channelDescription: 'K√™nh test nhanh',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
    );

    const details =
    NotificationDetails(android: androidDetails, iOS: DarwinNotificationDetails());

    await _flutterLocalNotificationsPlugin.zonedSchedule(
      100,
      'Test notification',
      'Hi·ªÉn th·ªã sau $seconds gi√¢y',
      scheduledDate,
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      // uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
      // androidAllowWhileIdle: true,
    );

    debugPrint('‚úÖ scheduled test for: $scheduledDate');
  }

  // ‚úÖ L√™n l·ªãch h√†ng ng√†y
  Future<void> scheduleDailyAt({
    required int hour,
    required int minute,
  }) async {
    final now = tz.TZDateTime.now(tz.local);
    var scheduledDate =
    tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);

    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }

    const androidDetails = AndroidNotificationDetails(
      'daily_channel_id',
      'Daily Notifications',
      channelDescription: 'Th√¥ng b√°o h·∫±ng ng√†y',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: DarwinNotificationDetails(presentAlert: true),
    );

    await _flutterLocalNotificationsPlugin.zonedSchedule(
      0,
      'Nh·∫Øc nh·ªü h·∫±ng ng√†y',
      'L√†m g√¨ v√†o l√∫c n√†y?',
      scheduledDate,
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      matchDateTimeComponents: DateTimeComponents.time,
      // uiLocalNotificationDateInterpretation:
      // UILocalNotificationDateInterpretation.absoluteTime,
      // androidAllowWhileIdle: true,
    );

    debugPrint("‚úÖ ƒê√£ l√™n l·ªãch th√¥ng b√°o h√†ng ng√†y l√∫c: $scheduledDate");
  }

  // ‚úÖ H·ªßy to√†n b·ªô
  Future<void> cancelAll() => _flutterLocalNotificationsPlugin.cancelAll();
}