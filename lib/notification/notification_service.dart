import 'dart:io';

import 'package:android_alarm_manager_plus/android_alarm_manager_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;
class NotificationService {
  static String dailyMorningId='daily_morning_id';
  static String dailyMorningName='Th√¥ng b√°o bu·ªïi s√°ng';
  static String titleMorning='Have a nice day';
  static String bodyMorning='T·ªõi gi·ªù ƒëi l√†m';


  static String dailyEveningId='daily_evening_id';
  static String dailyEveningName='Th√¥ng b√°o bu·ªïi t·ªëi';
  static String titleEvening='Good evening';
  static String bodyEvening='B·∫°n ƒë√£ v·ªÅ ƒë·∫øn nh√† ch∆∞a!';


  // Android Alarm IDs l√† duy nh·∫•t trong app

  static int androidMorningId=1001;
  static int androidEveningId=1002;
  static int androidTestId=1003;
  // Kh·ªüi t·∫°o plugin
  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
  FlutterLocalNotificationsPlugin();

  // H√†m kh·ªüi t·∫°o t·ªïng
  static Future<void> init() async {
    // Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu m√∫i gi·ªù
    tz.initializeTimeZones();
    //tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('Asia/Ho_Chi_Minh'));
    // Kh·ªüi t·∫°o service th√¥ng b√°o
    // C√†i ƒë·∫∑t cho Android
    const AndroidInitializationSettings initializationSettingsAndroid =
    AndroidInitializationSettings('@mipmap/ic_launcher'); // D√πng icon app m·∫∑c ƒë·ªãnh

    // C√†i ƒë·∫∑t cho iOS
    const DarwinInitializationSettings initializationSettingsIOS =
    DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    // Kh·ªüi t·∫°o plugin
    await _notificationsPlugin.initialize(initializationSettings);

    // Xin quy·ªÅn tr√™n Android +
  await  _requestExactAlarmPermission();
  }
  static  Future<void> _requestExactAlarmPermission() async {
    final androidPlugin = _notificationsPlugin
        .resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin>();

    final bool? canScheduleExact = await androidPlugin?.canScheduleExactNotifications();
    debugPrint("üîî C√≥ th·ªÉ l√™n l·ªãch exact notification: $canScheduleExact");

    if (canScheduleExact == false) {
      // m·ªü c√†i ƒë·∫∑t cho ng∆∞·ªùi d√πng b·∫≠t quy·ªÅn exact alarm
      await androidPlugin?.requestExactAlarmsPermission();
      debugPrint("üìÖ ƒê√£ y√™u c·∫ßu quy·ªÅn SCHEDULE_EXACT_ALARM");
    }
    //checkPending();
  }
  static Future<void> setupSchedule()async{
    if(Platform.isAndroid){

     //await testAndroid();
      await androidSetupMorning();
      await androidSetupEvening();
    }else if(Platform.isIOS){
      await NotificationService.cancelNotificationAll();
      await scheduleIOSDailyMorning();
      await scheduleIOSDailyEvening();
    }
  }
  //  todo --for android----------------------------
  static Future<void> testAndroid()async{
    await AndroidAlarmManager.cancel(androidTestId);
   // await AndroidAlarmManager.initialize();
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);

    tz.TZDateTime scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, 14,40);
    //int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    await AndroidAlarmManager.periodic(
      const Duration(days: 1),
      1003,
      showAndroidTestAlarm,
      startAt: scheduledDate,
      wakeup: true,
      rescheduleOnReboot: true,
    );
  }
  static Future<void> androidSetupMorning() async {
    await AndroidAlarmManager.cancel(androidMorningId);
    tz.TZDateTime scheduledDate = await getTimeSchedule(true);
    //int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    await AndroidAlarmManager.periodic(
      const Duration(days: 1),
      androidMorningId,
      showMorningAlarm,// androidShowNotificationMorning,/
      startAt: scheduledDate,
      wakeup: true,
      rescheduleOnReboot: true,
    );

  }
 static void androidShowNotificationMorning() async {
    final flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
    AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      dailyMorningId,
      dailyMorningName,
      channelDescription: 'Th√¥ng b√°o h·∫±ng ng√†y',
      importance: Importance.max,
      priority: Priority.high,
    );
    int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    await flutterLocalNotificationsPlugin.show(
      id,
      titleMorning,
      bodyMorning,
       NotificationDetails(android: androidDetails),
    );
  }
  static Future<void> androidSetupEvening() async {
    tz.TZDateTime scheduledDate = await getTimeSchedule(false);
    await AndroidAlarmManager.cancel(androidEveningId);
    await AndroidAlarmManager.periodic(
      const Duration(days: 1),
      androidEveningId,
      showEveningAlarm, // androidShowNotificationEvening,
      startAt: scheduledDate,
      wakeup: true,
      rescheduleOnReboot: true,
    );

  }
  static void androidShowNotificationEvening() async {
    final flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
    AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      dailyEveningId,
      dailyEveningName,
      channelDescription: 'Th√¥ng b√°o h·∫±ng ng√†y',
      importance: Importance.max,
      priority: Priority.high,
    );
    int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    await flutterLocalNotificationsPlugin.show(
      id,
      titleEvening,
      bodyEvening,
      NotificationDetails(android: androidDetails),
    );
  }
  //  todo --done android----------------------------
  //------------------------------------
  // todo --for ios----------------------------
  static Future<void> scheduleIOSDailyMorning() async {
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);

    tz.TZDateTime scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, 07,20);

    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }

    NotificationDetails  notificationDetails = NotificationDetails(
      // android: AndroidNotificationDetails(
      //   dailyMorningId, // ID c·ªßa Channel
      //   dailyMorningName, // T√™n Channel
      //   importance: Importance.max,
      //   priority: Priority.high,
      // ),
      iOS: DarwinNotificationDetails(
        presentBadge: true,
        presentAlert: true, // ‚úÖ B·∫ÆT BU·ªòC ƒë·ªÉ hi·ªán alert
        presentSound: true, // ‚úÖ B·∫ÆT BU·ªòC ƒë·ªÉ ph√°t √¢m b√°o
      ),
    );
    int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    debugPrint("id =$id");
    // 3. L√™n l·ªãch th√¥ng b√°o
    await _notificationsPlugin.zonedSchedule(
      id, // ID c·ªßa th√¥ng b√°o
      titleMorning,
      bodyMorning,
      scheduledDate, // Th·ªùi gian (TZDateTime)
      notificationDetails,

      // Quan tr·ªçng: B√°o cho Android ch·∫°y n·ªÅn
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      matchDateTimeComponents: DateTimeComponents.time,// üîÅ L·∫∑p l·∫°i m·ªói ng√†y c√πng gi·ªù
    );
  }

  static Future<void> scheduleIOSDailyEvening() async {
    // 1. T√≠nh to√°n th·ªùi gian 18:00 ti·∫øp theo
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, 18,10); // 18 gi·ªù

    // 2. ƒê·ªãnh nghƒ©a n·ªôi dung th√¥ng b√°o
    const NotificationDetails notificationDetails = NotificationDetails(
        // android: AndroidNotificationDetails(
        //   'daily_18pm_channel_id', // ID c·ªßa Channel
        //   'daily_18pm_channel_id', // T√™n Channel
        //   importance: Importance.max,
        //   priority: Priority.high,
        //   playSound: true,
        //   showWhen: true,
        //   enableLights: true,
        //   color: Colors.blue,
        //   ledColor: Colors.blue,
        //   ledOnMs: 1000,
        //   ledOffMs: 500,
        //   autoCancel: true,
        // ),
        iOS: DarwinNotificationDetails( presentBadge: true,
          presentAlert: true, // ‚úÖ B·∫ÆT BU·ªòC ƒë·ªÉ hi·ªán alert
          presentSound: true, // ‚úÖ B·∫ÆT BU·ªòC ƒë·ªÉ ph√°t √¢m b√°o),
        ));
    int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    debugPrint("id: =$id");
    // 3. L√™n l·ªãch th√¥ng b√°o
    await _notificationsPlugin.zonedSchedule(
      id, // ID c·ªßa th√¥ng b√°o
      titleEvening,
      bodyEvening,
      scheduledDate, // Th·ªùi gian (TZDateTime)
      notificationDetails,

      // Quan tr·ªçng: B√°o cho Android ch·∫°y n·ªÅn
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      matchDateTimeComponents: DateTimeComponents.time,// üîÅ L·∫∑p l·∫°i m·ªói ng√†y c√πng gi·ªù
    );
  }

  //todo --done ios----------------------------
  static Future<tz.TZDateTime> getTimeSchedule(bool morning)async{
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime? scheduledDate ;
    if(morning){
      scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, 7,20);
    }else{
      scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, 18,10);
    }
    return scheduledDate;
  }
  //--------------------
  static Future<void> checkPending()async{
    final pending = await _notificationsPlugin.pendingNotificationRequests();
    debugPrint("‚è± ƒêang c√≥ ${pending.length} notification ƒëang ch·ªù");
    for (var n in pending) {
      debugPrint("‚Ä¢ id=${n.id}, title=${n.title}, body=${n.body} ,payload=${n.payload}");
    }
    // final active = await _notificationsPlugin.getActiveNotifications();
    // debugPrint("‚è± ƒêang c√≥ ${active.length} notification active");
    // if(active.isNotEmpty){
    //   for (var n in active) {
    //    // debugPrint("‚Ä¢ id=${n.id}, title=${n.title}, body=${n.body} ,payload=${n.payload}");
    //     debugPrint("active: ${n.toString()}");
    //   }
    // }
  }
  static Future<void> showNow() async {
    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        'immediate_channel_id',
        'Th√¥ng b√°o t·ª©c th√¨',
        importance: Importance.max,
        priority: Priority.high,
      ),
      iOS: DarwinNotificationDetails(),
    );
    int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    await _notificationsPlugin.show(
      id+1, // ID ng·∫´u nhi√™n
      'Th·ª≠ th√¥ng b√°o üöÄ',
      'N·∫øu b·∫°n th·∫•y d√≤ng n√†y, plugin ƒë√£ ho·∫°t ƒë·ªông!',
      notificationDetails,
    );
    print('ƒê√£ g·ªçi xong showNow().');
  }
  static Future<void> scheduleRepeatEvery5Minutes() async {
    final scheduledDate = tz.TZDateTime.now(tz.local).add(const Duration(minutes: 5));

    const androidDetails = AndroidNotificationDetails(
      'repeat_channel_id',
      'Repeat Notification',
      channelDescription: 'Th√¥ng b√°o l·∫∑p l·∫°i m·ªói 5 ph√∫t',
      importance: Importance.max,
      priority: Priority.high,
    );
    int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    await _notificationsPlugin.zonedSchedule(
      id+1, // id b·∫•t k·ª≥
      'Th√¥ng b√°o ƒë·ªãnh k·ª≥',
      '‚è∞ Nh·∫Øc l·∫°i m·ªói 5 ph√∫t',
      scheduledDate,
      const NotificationDetails(android: androidDetails),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      // Kh√¥ng set matchDateTimeComponents v√¨ b·∫°n mu·ªën custom 5 ph√∫t
    );

    debugPrint("‚úÖ ƒê√£ l√™n l·ªãch l√∫c $scheduledDate");
  }
  static Future<void> scheduleEveryHour() async {
    final scheduledDate = tz.TZDateTime.now(tz.local).add(const Duration(hours: 1));

    int id = DateTime.now().millisecondsSinceEpoch.remainder(100000);
    // 2. ƒê·ªãnh nghƒ©a n·ªôi dung th√¥ng b√°o
     NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        'every_hour', // ID c·ªßa Channel
        'every_hour', // T√™n Channel
        importance: Importance.max,
        priority: Priority.high,
        playSound: true,
        showWhen: true,
        enableLights: true,
        color: Colors.blue,
        ledColor: Colors.blue,
        ledOnMs: 1000,
        ledOffMs: 500,
        autoCancel: true,
      ),
      iOS: DarwinNotificationDetails(presentBadge: true,
        presentAlert: true, // ‚úÖ B·∫ÆT BU·ªòC ƒë·ªÉ hi·ªán alert
        presentSound: true, // ‚úÖ B·∫ÆT BU·ªòC ƒë·ªÉ ph√°t √¢m b√°o),
      ));

    // 3. L√™n l·ªãch th√¥ng b√°o
    await _notificationsPlugin.zonedSchedule(
      id, // ID c·ªßa th√¥ng b√°o
      'Th√¥ng b√°o m·ªói Gi·ªù üîî',
      'B·∫°n c√≥ k·∫ø ho·∫°ch n√†o m·ªõi kh√¥ng',
      scheduledDate, // Th·ªùi gian (TZDateTime)
      notificationDetails,

      // Quan tr·ªçng: B√°o cho Android ch·∫°y n·ªÅn
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      //matchDateTimeComponents: DateTimeComponents.time,// üîÅ L·∫∑p l·∫°i m·ªói ng√†y c√πng gi·ªù
    );
  }


  // (T√πy ch·ªçn) H·ªßy th√¥ng b√°o
  static Future<void> cancelNotification(int id) async {
    await _notificationsPlugin.cancel(id);
    await _notificationsPlugin.cancelAll();
  }
  static Future<void> cancelNotificationAll() async {
    await _notificationsPlugin.cancelAll();
  }
}
// todo ph·∫£i ƒë·∫∑c ngo√†i class m·ªõi ch·∫°y ƒë∆∞·ª£c tr√™n android background
@pragma('vm:entry-point')
void showAndroidTestAlarm() async {
  final FlutterLocalNotificationsPlugin plugin = FlutterLocalNotificationsPlugin();
  const AndroidInitializationSettings androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
  const InitializationSettings initSettings = InitializationSettings(android: androidInit);
  await plugin.initialize(initSettings);

  const androidDetails = AndroidNotificationDetails(
    'test_id',
    'Th√¥ng b√°o Test',
    channelDescription: 'Th√¥ng b√°o Test',
    importance: Importance.max,
    priority: Priority.high,
  );
  final id = DateTime.now().millisecondsSinceEpoch.remainder(100000); // t·∫°o id ng·∫´u nhi√™n
  await plugin.show(
    id,
    'Test Alarm',
    'ƒê√£ hi·ªán th·ªã th√¥ng b√°o test alarm',
    const NotificationDetails(android: androidDetails),
  );

  print("üî• Test alarm triggered at ${DateTime.now()}");
}

@pragma('vm:entry-point')
void showMorningAlarm() async {
  final FlutterLocalNotificationsPlugin plugin = FlutterLocalNotificationsPlugin();
  const AndroidInitializationSettings androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
  const InitializationSettings initSettings = InitializationSettings(android: androidInit);
  await plugin.initialize(initSettings);

  const androidDetails = AndroidNotificationDetails(
    'daily_morning_id',
    'Th√¥ng b√°o bu·ªïi s√°ng',
    channelDescription: 'Th√¥ng b√°o bu·ªïi s√°ng',
    importance: Importance.max,
    priority: Priority.high,
  );
  final id = DateTime.now().millisecondsSinceEpoch.remainder(100000); // t·∫°o id ng·∫´u nhi√™n
  await plugin.show(
    id,
    'Have a nice day',
    'T·ªõi gi·ªù ƒëi l√†m',
    const NotificationDetails(android: androidDetails),
  );

  print("üî• Morning alarm triggered at ${DateTime.now()}");
}

@pragma('vm:entry-point')
void showEveningAlarm() async {
  final FlutterLocalNotificationsPlugin plugin = FlutterLocalNotificationsPlugin();
  const AndroidInitializationSettings androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
  const InitializationSettings initSettings = InitializationSettings(android: androidInit);
  await plugin.initialize(initSettings);

  const androidDetails = AndroidNotificationDetails(
    'daily_evening_id',
    'Th√¥ng b√°o bu·ªïi t·ªëi',
    channelDescription: 'Th√¥ng b√°o bu·ªïi t·ªëi',
    importance: Importance.max,
    priority: Priority.high,
  );
  final id = DateTime.now().millisecondsSinceEpoch.remainder(100000); // t·∫°o id ng·∫´u nhi√™n
  await plugin.show(
    id,
    'Good evening',
    'B·∫°n ƒë√£ v·ªÅ ƒë·∫øn nh√† ch∆∞a!',
    const NotificationDetails(android: androidDetails),
  );

  print("üî• Evening alarm triggered at ${DateTime.now()}");
}
